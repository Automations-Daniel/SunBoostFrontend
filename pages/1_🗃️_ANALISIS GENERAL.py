import streamlit as st
from controllers.analisis import get_general_video_performance
import pandas as pd

st.set_page_config(page_title="An√°lisis General de Creativos", page_icon="üóÉÔ∏è")

# T√≠tulo de la p√°gina
st.title("üóÉÔ∏è Rendimiento General de Creativos")

# Selectores de fecha opcionales
st.write("### Filtrar por rango de fechas (opcional)")
start_date = st.date_input("Fecha de inicio", value=None)
end_date = st.date_input("Fecha de fin", value=None)

# Convertir las fechas seleccionadas a formato string para enviarlas al backend
start_date_str = start_date.strftime("%Y-%m-%d") if start_date else None
end_date_str = end_date.strftime("%Y-%m-%d") if end_date else None


# Funci√≥n para borrar la cach√© de an√°lisis general
def clear_cache():
    get_general_video_performance.clear()


# Funci√≥n para cargar los datos del an√°lisis general con las fechas opcionales
def load_general_performance(start_date=None, end_date=None):
    return pd.DataFrame(get_general_video_performance(start_date, end_date))


# Estado de la aplicaci√≥n para controlar la actualizaci√≥n de datos
if "reload_general_performance" not in st.session_state:
    st.session_state.reload_general_performance = False

# Bot√≥n para actualizar datos, ahora est√° al final de la p√°gina
if st.button("Actualizar an√°lisis general"):
    clear_cache()  # Limpiar la cach√©
    st.session_state.reload_general_performance = (
        True  # Cambiar estado para forzar la recarga
    )
    general_performance = load_general_performance(
        start_date_str, end_date_str
    )  # Cargar datos inmediatamente tras limpiar la cach√©

# Decidir si cargar el DataFrame desde la cach√© o recargar desde el servidor
else:
    general_performance = load_general_performance(start_date_str, end_date_str)

# Mostrar los datos si est√°n disponibles
if general_performance.empty:
    st.warning("No hay datos de an√°lisis general disponibles.")
else:
    st.dataframe(general_performance)
